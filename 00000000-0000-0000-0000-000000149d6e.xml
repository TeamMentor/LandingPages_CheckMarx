<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>00000000-0000-0000-0000-000000149d6e</Id>
    <Library_Id>c037d0d2-0617-44f3-b846-21dc3d02c4f8</Library_Id>
    <Title>HTTP Response Splitting</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Implementation</Phase>
    <Technology>PHP</Technology>
    <Type>Landing Page</Type>
    <DirectLink>HTTP Response Splitting</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[==Description==

HTTP Response Splitting occurs when an attacker is able to inject arbitrary data into the headers of HTTP responses. This vulnerability allows the attacker to force HTTP responses that contain HTML of the attacker's choosing. HTTP Response Splitting applies to web applications that place user input in HTTP response headers. To prevent this vulnerability, validate all input and URL-encode data in HTTP response headers. To check for this vulnerability, find all code that outputs custom HTTP response headers and make sure that this code does not include unvalidated, unencoded user data in the headers.

==Impact==

By allowing the attacker essentially complete control over an HTTP response that is rendered in the context of your domain, you open the door for a Phishing Attack or a Cross Site Scripting Attack.

==Countermeasures==

Validate all input:

URL-encode data in HTTP response headers:

==Checklists==

All input is validated:

Data in HTTP response headers is URL-encoded:

==Additional Resources==

http://en.wikipedia.org/wiki/HTTP_response_splitting

http://cwe.mitre.org/data/definitions/113.html]]></Data>
  </Content>
</TeamMentor_Article>