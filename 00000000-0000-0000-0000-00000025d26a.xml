<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>00000000-0000-0000-0000-00000025d26a</Id>
    <Library_Id>c037d0d2-0617-44f3-b846-21dc3d02c4f8</Library_Id>
    <Title>Open Redirect</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Implementation</Phase>
    <Technology>PHP</Technology>
    <Type>Landing Page</Type>
    <DirectLink>Open Redirect</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[==Description==

Many web applications use URL redirection as a feature to direct a user to another site or page on the same site. Some web sites make it possible to manipulate the destination of the URL redirection. An attacker may be able to abuse this functionality to trick users into entering sensitive information into a malicious website while seemingly navigating within a trusted website. This vulnerability applies to all applications that use URL redirection. To prevent this problem, validate destinations of redirects, use reference maps to limit possible destinations, and avoid redirection based on user input if possible. To check your code for this problem, identify all URL redirects and check whether data used to determine destinations is sufficiently validated.

==Impact==

An attacker may be able to leverage this vulnerability to trick users into entering sensitive information into a malicious website while seemingly navigating within a trusted website. 

==Countermeasures==

The following TeamMentor articles describe effective counter-measures against unvalidated redirection vulnerabilities: 

==Checklists==

The following checklist items can help make sure that effective counter-measures against unvalidated redirection vulnerabilities have been implemented: 

==Additional Resources==]]></Data>
  </Content>
</TeamMentor_Article>